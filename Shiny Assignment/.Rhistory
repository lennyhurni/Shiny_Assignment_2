# Filter data for bulls slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls", State == "Queensland")
# Check if the filtering is correct
if(nrow(bulls_qld) == 0) {
stop("No data found for Bulls slaughtered in Queensland")
} else {
head(bulls_qld)
}
# Load necessary libraries
library(fpp3)
# Load the dataset
data("aus_livestock")
# Inspect unique values in the dataset
unique(aus_livestock$Animal)
unique(aus_livestock$State)
# Display the first few rows of the dataset to understand its structure
head(aus_livestock)
# Load necessary libraries
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls, bullocks and steers", State == "Queensland")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls", State == "Queensland")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls, bullocks and steers", State == "Queensland")
View(aus_livestock)
View(aus_livestock)
# Check if the filtering is correct
if(nrow(bulls_qld) == 0) {
stop("No data found for Bulls, bullocks and steers slaughtered in Queensland")
} else {
head(bulls_qld)
}
# Apply ETS model
fit <- bulls_qld %>%
model(ETS(Count))
# Summary of the model
report(fit)
# Compute the 95% prediction interval
forecast_fit <- fit %>%
forecast(h = 1)
# Calculate standard deviation of residuals
residuals_sd <- fit %>% residuals() %>% features(.innov, sd)
library(dplyr)
# Calculate standard deviation of residuals
residuals_sd <- fit %>% residuals() %>% features(.innov, sd)
# Calculate residuals
residuals <- fit %>% residuals()
# Calculate standard deviation of residuals
residuals_sd <- residuals %>% features(.resid, sd)
# Compute 95% prediction interval using ŷ ± 2s
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
prediction_interval <- first_forecast$.mean + c(-2, 2) * residuals_sd$.value
# Display the prediction interval
prediction_interval
# Display the prediction interval
prediction_interval
# Calculate residuals
residuals <- fit %>% residuals()
# Calculate standard deviation of residuals
residuals_sd <- residuals %>% summarise(sd = sd(.resid))
# Extract the standard deviation value
residuals_sd_value <- residuals_sd$sd
# Compute 95% prediction interval using ŷ ± 2s
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
prediction_interval <- first_forecast$.mean + c(-2, 2) * residuals_sd_value
# Display the prediction interval
prediction_interval
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls, bullocks and steers", State == "Queensland")
# Check if the filtering is correct
if(nrow(bulls_qld) == 0) {
stop("No data found for Bulls, bullocks and steers slaughtered in Queensland")
} else {
head(bulls_qld)
}
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Summary of the model
report(fit)
# Calculate residuals
residuals <- fit %>% residuals()
# Calculate standard deviation of residuals
residuals_sd <- residuals %>% summarise(sd = sd(.resid))
# Extract the standard deviation value
residuals_sd_value <- residuals_sd$sd
# Compute 95% prediction interval using ŷ ± 2s
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
# Extract the mean forecast value
mean_forecast <- first_forecast$.mean
# Compute the prediction interval
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Display the prediction interval
prediction_interval
# Display the prediction interval
prediction_interval
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls, bullocks and steers", State == "Queensland")
# Check if the filtering is correct
if(nrow(bulls_qld) == 0) {
stop("No data found for Bulls, bullocks and steers slaughtered in Queensland")
} else {
head(bulls_qld)
}
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Summary of the model
report(fit)
# Calculate residuals
residuals <- fit %>% residuals()
# Calculate standard deviation of residuals
residuals_sd <- residuals %>% summarise(sd = sd(.resid))
# Extract the standard deviation value
residuals_sd_value <- residuals_sd$sd
# Compute 95% prediction interval using ŷ ± 2s
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
# Extract the mean forecast value
mean_forecast <- first_forecast$.mean
# Compute the prediction interval
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Display the prediction interval
prediction_interval
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls, bullocks and steers", State == "Queensland")
# Check if the filtering is correct
if(nrow(bulls_qld) == 0) {
stop("No data found for Bulls, bullocks and steers slaughtered in Queensland")
} else {
head(bulls_qld)
}
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Summary of the model
report(fit)
# Calculate residuals
residuals <- fit %>% residuals()
# Display the residuals to verify
print(head(residuals))
# Calculate standard deviation of residuals
residuals_sd <- residuals %>% summarise(sd = sd(.resid))
# Display the standard deviation to verify
print(residuals_sd)
# Extract the standard deviation value
residuals_sd_value <- residuals_sd$sd
# Display the standard deviation value to verify
print(residuals_sd_value)
# Compute 95% prediction interval using ŷ ± 2s
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
# Display the first forecast to verify
print(first_forecast)
# Extract the mean forecast value
mean_forecast <- first_forecast$.mean
# Display the mean forecast value to verify
print(mean_forecast)
# Compute the prediction interval
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Display the prediction interval
print(prediction_interval)
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland
bulls_qld <- aus_livestock %>% filter(Animal == "Bulls, bullocks and steers", State == "Queensland")
# Check if the filtering is correct
if(nrow(bulls_qld) == 0) {
stop("No data found for Bulls, bullocks and steers slaughtered in Queensland")
} else {
head(bulls_qld)
}
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Summary of the model
report(fit)
# Calculate residuals
residuals <- fit %>% residuals()
# Display the residuals to verify
print(head(residuals))
# Calculate standard deviation of residuals across all data points
residuals_sd_value <- residuals %>% pull(.resid) %>% sd()
# Display the standard deviation value to verify
print(residuals_sd_value)
# Compute 95% prediction interval using ŷ ± 2s
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
# Display the first forecast to verify
print(first_forecast)
# Extract the mean forecast value
mean_forecast <- first_forecast$.mean
# Display the mean forecast value to verify
print(mean_forecast)
# Compute the prediction interval
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Display the prediction interval
print(prediction_interval)
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland from January 2000 to December 2016
bulls_qld <- aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Queensland", year(Month) >= 2000, year(Month) <= 2016)
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Calculate residuals and standard deviation of residuals
residuals <- fit %>% residuals()
residuals_sd_value <- residuals %>% pull(.resid) %>% sd()
# Compute 95% prediction interval for the first forecast
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
mean_forecast <- first_forecast$.mean
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Output the prediction interval
prediction_interval
# Judge the quality of the model using the remaining data
accuracy(forecast_fit, bulls_qld)
# Consider adding trend and/or seasonality to the model
fit_enhanced <- bulls_qld %>%
model(ETS(Count ~ trend() + season()))
report(fit_enhanced)
# Compare accuracy
accuracy(fit_enhanced, bulls_qld)
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland from January 2000 to December 2016
bulls_qld <- aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Queensland", year(Month) >= 2000, year(Month) <= 2016)
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Calculate residuals and standard deviation of residuals
residuals <- fit %>% residuals()
residuals_sd_value <- residuals %>% pull(.resid) %>% sd()
# Compute 95% prediction interval for the first forecast
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
mean_forecast <- first_forecast$.mean
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Output the prediction interval
prediction_interval
# Judge the quality of the model using the remaining data
# Create training and test sets
train_data <- bulls_qld %>% filter(year(Month) <= 2015)
test_data <- bulls_qld %>% filter(year(Month) > 2015)
# Refit the model on the training set
fit_train <- train_data %>% model(ETS(Count))
# Generate forecasts for the test period
forecasts <- fit_train %>% forecast(new_data = test_data)
# Calculate accuracy measures
accuracy_measures <- accuracy(forecasts, test_data)
# Output the accuracy measures
accuracy_measures
# Consider adding trend and/or seasonality to the model
fit_enhanced <- bulls_qld %>%
model(ETS(Count ~ trend() + season()))
report(fit_enhanced)
# Generate forecasts for the test period using the enhanced model
forecasts_enhanced <- fit_enhanced %>% forecast(new_data = test_data)
# Calculate accuracy measures for the enhanced model
accuracy_measures_enhanced <- accuracy(forecasts_enhanced, test_data)
# Output the accuracy measures for the enhanced model
accuracy_measures_enhanced
library(fpp3)
# Load the dataset
data("aus_livestock")
# Filter data for "Bulls, bullocks and steers" slaughtered in Queensland from January 2000 to December 2016
bulls_qld <- aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Queensland", year(Month) >= 2000, year(Month) <= 2016)
# Apply ETS model
fit <- bulls_qld %>% model(ETS(Count))
# Calculate residuals and standard deviation of residuals
residuals <- fit %>% residuals()
residuals_sd_value <- residuals %>% pull(.resid) %>% sd()
# Compute 95% prediction interval for the first forecast
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
mean_forecast <- first_forecast$.mean
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
# Output the prediction interval
prediction_interval
# Judge the quality of the model using the remaining data
# Create training and test sets
train_data <- bulls_qld %>% filter(year(Month) <= 2015)
test_data <- bulls_qld %>% filter(year(Month) > 2015)
# Refit the model on the training set
fit_train <- train_data %>% model(ETS(Count))
# Generate forecasts for the test period
forecasts <- fit_train %>% forecast(new_data = test_data)
# Calculate accuracy measures
accuracy_measures <- accuracy(forecasts, test_data)
# Consider adding trend and/or seasonality to the model
fit_enhanced <- bulls_qld %>%
model(ETS(Count ~ trend() + season()))
report(fit_enhanced)
# Generate forecasts for the test period using the enhanced model
forecasts_enhanced <- fit_enhanced %>% forecast(new_data = test_data)
# Calculate accuracy measures for the enhanced model
accuracy_measures_enhanced <- accuracy(forecasts_enhanced, test_data)
# Output the accuracy measures for the enhanced model
accuracy_measures_enhanced
library(fpp3)
data("aus_livestock")
bulls_qld <- aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Queensland", year(Month) >= 2000, year(Month) <= 2016)
fit <- bulls_qld %>% model(ETS(Count))
report(fit)
library(fpp3)
data("aus_livestock")
bulls_qld <- aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Queensland", year(Month) >= 2000, year(Month) <= 2016)
fit <- bulls_qld %>% model(ETS(Count))
report(fit)
residuals <- fit %>% residuals()
residuals_sd_value <- residuals %>% pull(.resid) %>% sd()
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
mean_forecast <- first_forecast$.mean
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
prediction_interval
train_data <- bulls_qld %>% filter(year(Month) <= 2015)
test_data <- bulls_qld %>% filter(year(Month) > 2015)
fit_train <- train_data %>% model(ETS(Count))
forecasts <- fit_train %>% forecast(new_data = test_data)
accuracy_measures <- accuracy(forecasts, test_data)
accuracy_measures
accuracy_measures
fit_enhanced <- bulls_qld %>%
model(ETS(Count ~ trend() + season()))
report(fit_enhanced)
forecasts_enhanced <- fit_enhanced %>% forecast(new_data = test_data)
accuracy_measures_enhanced <- accuracy(forecasts_enhanced, test_data)
accuracy_measures_enhanced
library(fpp3)
data("aus_livestock")
bulls_qld <- aus_livestock %>%
filter(Animal == "Bulls, bullocks and steers", State == "Queensland", year(Month) >= 2000, year(Month) <= 2016)
#1
fit <- bulls_qld %>% model(ETS(Count))
report(fit)
#2
residuals <- fit %>% residuals()
residuals_sd_value <- residuals %>% pull(.resid) %>% sd()
forecast_fit <- fit %>% forecast(h = 1)
first_forecast <- forecast_fit %>% slice(1)
mean_forecast <- first_forecast$.mean
prediction_interval <- mean_forecast + c(-2, 2) * residuals_sd_value
prediction_interval
#3
train_data <- bulls_qld %>% filter(year(Month) <= 2015)
test_data <- bulls_qld %>% filter(year(Month) > 2015)
fit_train <- train_data %>% model(ETS(Count))
forecasts <- fit_train %>% forecast(new_data = test_data)
accuracy_measures <- accuracy(forecasts, test_data)
accuracy_measures
#4
fit_enhanced <- bulls_qld %>%
model(ETS(Count ~ trend() + season()))
report(fit_enhanced)
forecasts_enhanced <- fit_enhanced %>% forecast(new_data = test_data)
accuracy_measures_enhanced <- accuracy(forecasts_enhanced, test_data)
accuracy_measures_enhanced
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
remainder <- souvenirs_ma %>% select(remainder)
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
remainder <- souvenirs_ma %>% select(Sales, remainder)
head(souvenirs)
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
# Inspect the components to see the exact column names
glimpse(souvenirs_ma)
# Plot the decomposition components
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
# The column might be named differently; let's use the correct name
remainder <- souvenirs_ma %>% select(Sales, remainder = .resid)
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
# Plot the decomposition components
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
# The remainder column is named `random`
remainder <- souvenirs_ma %>% select(Month, Sales, remainder = random)
autoplot(remainder) +
labs(title = "Remainder Series")
# Check for white noise in the remainder
gg_tsdisplay(remainder$remainder, plot_type = "partial")
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
# Plot the decomposition components
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
# The remainder column is named `random`
remainder <- souvenirs_ma %>% select(Month, remainder = random)
autoplot(remainder) +
labs(title = "Remainder Series")
# Convert remainder to a tsibble to use gg_tsdisplay
remainder_ts <- remainder %>%
as_tsibble(index = Month)
# Check for white noise in the remainder
gg_tsdisplay(remainder_ts$remainder, plot_type = "partial")
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
# Plot the decomposition components
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
# The remainder column is named `random`
remainder <- souvenirs_ma %>% select(Month, random)
autoplot(remainder) +
labs(title = "Remainder Series")
# Convert remainder to a tsibble to use gg_tsdisplay
remainder_ts <- remainder %>%
as_tsibble(index = Month)
# Check for white noise in the remainder
gg_tsdisplay(remainder_ts, .vars = random, plot_type = "partial")
library(fpp3)
# Load the dataset
data("souvenirs")
# 1. Use the moving average method to decompose your series, and explain whether the remainder is a white noise.
souvenirs_ma <- souvenirs %>%
model(classical_decomposition(Sales, type = "multiplicative")) %>%
components()
# Plot the decomposition components
autoplot(souvenirs_ma) +
labs(title = "Classical Decomposition of Souvenirs Sales Data")
# Check if the remainder is white noise
# The remainder column is named `random`
remainder <- souvenirs_ma %>% select(Month, random)
autoplot(remainder) +
labs(title = "Remainder Series")
# Convert remainder to a tsibble to use gg_tsdisplay
remainder_ts <- remainder %>%
as_tsibble(index = Month)
# Check for white noise in the remainder
gg_tsdisplay(remainder_ts, random, plot_type = "partial")
# 2. Check if another decomposition is more appropriate for your series.
souvenirs_stl <- souvenirs %>%
model(STL(Sales ~ trend(window = 7) + season(window = "periodic"))) %>%
components()
autoplot(souvenirs_stl) +
labs(title = "STL Decomposition of Souvenirs Sales Data")
# 3. Give and interpret five (of your choice) time series specific numerical summaries of your series.
summary_statistics <- souvenirs %>%
features(Sales, list(mean = mean, sd = sd, max = max, min = min, n = length))
summary_statistics
# Interpret the numerical summaries
mean_sales <- summary_statistics$mean
sd_sales <- summary_statistics$sd
max_sales <- summary_statistics$max
min_sales <- summary_statistics$min
n_sales <- summary_statistics$n
cat("Mean Sales: ", mean_sales, "\n")
cat("Standard Deviation of Sales: ", sd_sales, "\n")
cat("Maximum Sales: ", max_sales, "\n")
cat("Minimum Sales: ", min_sales, "\n")
cat("Number of Observations: ", n_sales, "\n")
gg_tsdisplay(remainder_ts, random, plot_type = "partial")
